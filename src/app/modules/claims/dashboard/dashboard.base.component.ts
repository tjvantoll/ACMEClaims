//-------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// You can write your custom code in the dashboard.component.ts file instead.
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
//-------------------------------------------------------------------------
import { Component, ViewEncapsulation, OnInit, AfterViewInit, OnDestroy, Injector } from '@angular/core';

import { ActivatedRoute } from '@angular/router';
import { map } from 'rxjs/operators';

import { UtilsService } from '@src/app/core/services/utils.service';
import { DataServiceFactory } from '@src/app/core/data/data-service.factory';
import { KinveyServiceConfig } from '@src/app/core/data/kinvey-service-config';
import { CollectionDataService } from '@src/app/core/data/collection-data.service';
import { CollectionState } from '@src/app/core/data/state/collection-state.interface';
import { Claim } from '@src/app/data/claim.model';
import { ClaimType } from '@src/app/data/claim-type.model';
import { ClaimStatus } from '@src/app/data/claim-status.model';
import { getClaimConfig } from '@src/app/data/claim.config';
import { getClaimTypeConfig } from '@src/app/data/claim-type.config';
import { getClaimStatusConfig } from '@src/app/data/claim-status.config';
import { ErrorHandlingService } from '@src/app/core/error-handling.service';

@Component({
    templateUrl: './dashboard.component.html',
    styleUrls: ['./dashboard.component.css']
})
export class DashboardViewBaseComponent implements OnInit, AfterViewInit, OnDestroy {
    public $config = {
        components: {
            label0: {
                forAttribute: '',
                textKey: 'modules.Claims.views.Dashboard.components.label0.text'
            },
            piecharts0: {
                title: {
                    textKey: 'modules.Claims.views.Dashboard.components.piecharts0.titleText'
                },
                legend: {
                    visible: true,
                    background: 'white',
                    position: 'top'
                },
                seriesDefaults: {
                    type: 'pie',
                    labels: {
                        visible: true,
                        background: 'white'
                    }
                },
                series: [
                    {
                        field: 'count',
                        categoryField: 'type',
                        startAngle: 90,
                        labels: {}
                    }
                ],
                tooltip: {
                    format: '',
                    visible: false
                }
            },

            barcharts0: {
                title: {
                    textKey: 'modules.Claims.views.Dashboard.components.barcharts0.titleText'
                },
                legend: {
                    visible: true,
                    background: 'white',
                    position: 'top'
                },
                valueAxis: {
                    line: {
                        visible: true
                    },
                    labels: {
                        format: '{0}',
                        rotation: {
                            angle: 0
                        }
                    }
                },
                categoryAxis: {
                    field: 'type',
                    labels: {
                        format: '{0}',
                        rotation: {
                            angle: 0
                        }
                    }
                },
                seriesDefaults: {
                    type: 'bar',
                    labels: {
                        visible: false
                    }
                },
                series: [
                    {
                        field: 'count',
                        name: 'Claim Status',
                        labels: {}
                    }
                ],
                tooltip: {
                    format: '',
                    visible: false
                }
            }
        }
    };

    public $claimsService: CollectionDataService<Claim>;
    public $claimTypeService: CollectionDataService<ClaimType>;
    public $claimStatusService: CollectionDataService<ClaimStatus>;

    public $dataModels: any = {
        ClaimsModel: {},
        ClaimTypeModel: {},
        ClaimStatusModel: {}
    };

    protected $activatedRoute: ActivatedRoute;
    protected $utilsService: UtilsService;
    protected $serviceFactory: DataServiceFactory;
    protected $errorHandlingService: ErrorHandlingService;

    constructor(public injector: Injector) {
        this.$activatedRoute = injector.get(ActivatedRoute);
        this.$utilsService = injector.get(UtilsService);
        this.$serviceFactory = injector.get(DataServiceFactory);
        this.$errorHandlingService = injector.get(ErrorHandlingService);

        const dataConfig = {
            claims: getClaimConfig(),
            claimType: getClaimTypeConfig(),
            claimStatus: getClaimStatusConfig()
        };

        this.initDataServices(dataConfig);
    }

    public ngOnInit(): void {
        this['onInit']();
    }

    public ngAfterViewInit(): void {
        this['onShow']();
    }

    public ngOnDestroy(): void {
        this['onHide']();
    }

    protected initDataServices(dataConfig: { [key: string]: KinveyServiceConfig }) {
        this.$claimsService = this.$serviceFactory.collection<Claim>({
            config: dataConfig.claims,
            initialState: {
                skip: 0,
                take: 20
            },
            typeName: Claim.name
        });

        this.$claimTypeService = this.$serviceFactory.collection<ClaimType>({
            config: dataConfig.claimType,
            initialState: {
                skip: 0,
                take: 20
            },
            typeName: ClaimType.name
        });

        this.$claimStatusService = this.$serviceFactory.collection<ClaimStatus>({
            config: dataConfig.claimStatus,
            initialState: {
                skip: 0,
                take: 20
            },
            typeName: ClaimStatus.name
        });

        this.$errorHandlingService.subscribe(this.$claimsService.errors);
        this.$errorHandlingService.subscribe(this.$claimTypeService.errors);
        this.$errorHandlingService.subscribe(this.$claimStatusService.errors);
    }
}
