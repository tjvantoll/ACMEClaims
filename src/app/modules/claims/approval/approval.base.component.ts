//-------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// You can write your custom code in the approval.component.ts file instead.
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
//-------------------------------------------------------------------------
import { Component, Injector, ViewChild, OnInit, AfterViewInit, OnDestroy } from '@angular/core';

import { KsGridComponent } from '@src/app/shared/components/grid/grid.component';
import { ActivatedRoute } from '@angular/router';
import { map } from 'rxjs/operators';

import { UtilsService } from '@src/app/core/services/utils.service';
import { DataServiceFactory } from '@src/app/core/data/data-service.factory';
import { KinveyServiceConfig } from '@src/app/core/data/kinvey-service-config';
import { CollectionDataService } from '@src/app/core/data/collection-data.service';
import { CollectionState } from '@src/app/core/data/state/collection-state.interface';
import { Claim } from '@src/app/data/claim.model';
import { getClaimConfig } from '@src/app/data/claim.config';
import { ErrorHandlingService } from '@src/app/core/error-handling.service';

@Component({
    templateUrl: './approval.component.html',
    styleUrls: ['./approval.component.css']
})
export class ApprovalViewBaseComponent implements OnInit, AfterViewInit, OnDestroy {
    @ViewChild('grid')
    public $grid: KsGridComponent;

    public $config = {
        title: 'Approve and Deny Claims',
        titleKey: 'modules.Claims.views.Approval.title',
        components: {
            grid: {
                filterable: false,
                groupable: false,
                pageable: true,
                reorderable: false,
                resizable: false,
                sortable: true,
                commandColumnWidth: 220,
                editing: {
                    mode: 'Inline'
                },
                confirmDelete: true,
                events: {
                    onRowSelect: e => {
                        this['onRowSelect'](e);
                    }
                }
            },

            ctl4: {
                placeholderKey: 'modules.Claims.views.Approval.components.ctl4.placeholder',
                name: 'image',
                value: '',
                title: 'Image',
                debounce: 0
            },
            ctl1: {
                placeholderKey: 'modules.Claims.views.Approval.components.ctl1.placeholder',
                name: 'name',
                value: '',
                title: 'Name',
                debounce: 0
            },
            ctl2: {
                format: 'M/dd/yyyy',
                title: 'Date',
                min: new Date('1899-12-31T22:00:00.000Z'),
                max: new Date('2099-12-30T22:00:00.000Z')
            },
            ctl3: {
                placeholderKey: 'modules.Claims.views.Approval.components.ctl3.placeholder',
                name: 'vehicle',
                value: '',
                title: 'Vehicle',
                debounce: 0
            },
            ctl7: {
                placeholderKey: 'modules.Claims.views.Approval.components.ctl7.placeholder',
                name: 'type',
                value: '',
                title: 'Type',
                debounce: 0
            },
            ctl8: {
                placeholderKey: 'modules.Claims.views.Approval.components.ctl8.placeholder',
                name: 'status',
                value: '',
                title: 'Approved',
                debounce: 0
            }
        }
    };

    public $claimsService: CollectionDataService<Claim>;

    public $dataModels: any = {
        ClaimsModel: {}
    };

    protected $activatedRoute: ActivatedRoute;
    protected $utilsService: UtilsService;
    protected $serviceFactory: DataServiceFactory;
    protected $errorHandlingService: ErrorHandlingService;

    constructor(public injector: Injector) {
        this.$activatedRoute = injector.get(ActivatedRoute);
        this.$utilsService = injector.get(UtilsService);
        this.$serviceFactory = injector.get(DataServiceFactory);
        this.$errorHandlingService = injector.get(ErrorHandlingService);

        const dataConfig = {
            claims: getClaimConfig()
        };

        this.initDataServices(dataConfig);
    }

    public ngOnInit(): void {
        this['onInit']();
    }

    public ngAfterViewInit(): void {
        this['onShow']();
    }

    public ngOnDestroy(): void {
        this['onHide']();
    }

    protected initDataServices(dataConfig: { [key: string]: KinveyServiceConfig }) {
        this.$claimsService = this.$serviceFactory.collection<Claim>({
            config: dataConfig.claims,
            initialState: {
                skip: 0,
                take: 10
            },
            typeName: Claim.name
        });

        this.$errorHandlingService.subscribe(this.$claimsService.errors);
    }
}
