//-------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// You can write your custom code in the claims.component.tns.ts file instead.
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
//-------------------------------------------------------------------------
import { Component, Injector } from '@angular/core';

import { ActivatedRoute } from '@angular/router';
import { map } from 'rxjs/operators';

import { NavigationService } from '@src/app/core/services/navigation.service';
import { UtilsService } from '@src/app/core/services/utils.service';
import { DataServiceFactory } from '@src/app/core/data/data-service.factory';
import { KinveyServiceConfig } from '@src/app/core/data/kinvey-service-config';
import { CollectionDataService } from '@src/app/core/data/collection-data.service';
import { CollectionState } from '@src/app/core/data/state/collection-state.interface';
import { Claim } from '@src/app/data/claim.model';
import { getClaimConfig } from '@src/app/data/claim.config';

abstract class CustomEventHandlers {}

@Component({
    templateUrl: './claims.component.html',
    styleUrls: ['./claims.component.css']
})
export abstract class ClaimsViewBaseComponent extends CustomEventHandlers {
    public $config = {
        listView: {
            navigateOnItemTap: {
                parameter: ''
            }
        }
    };

    public $claimsService: CollectionDataService<Claim>;

    protected $activatedRoute: ActivatedRoute;
    protected $navigationService: NavigationService;
    protected $utilsService: UtilsService;
    protected $serviceFactory: DataServiceFactory;

    constructor(public injector: Injector) {
        super();

        this.$activatedRoute = injector.get(ActivatedRoute);
        this.$navigationService = injector.get(NavigationService);
        this.$utilsService = injector.get(UtilsService);
        this.$serviceFactory = injector.get(DataServiceFactory);

        const dataConfig = {
            claims: getClaimConfig()
        };

        this.initDataServices(dataConfig);
    }

    protected initDataServices(dataConfig: { [key: string]: KinveyServiceConfig }) {
        this.$claimsService = this.$serviceFactory.collection<Claim>({
            config: dataConfig.claims,
            initialState: {
                skip: 0,
                take: 20
            },
            typeName: Claim.name
        });
    }
}
